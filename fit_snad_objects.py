# -*- coding: utf-8 -*-
"""fit_snad_objects.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P61QM-HLPThsVBDUdvcahqSBcA0IC0X1
"""

import sncosmo
import sfdmap
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
import astropy
from astropy.table import Table
from astropy import constants
import requests
import seaborn as sns
import json
from pydantic import BaseModel
from typing import Literal, List, Dict
import math

import time
import selenium
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from sncosmo.fitting import DataQualityError


class Observation(BaseModel):
    mjd: float
    flux: float
    fluxerr: float
    zp: float = 8.9
    zpsys: Literal['ab', 'vega'] = 'ab'
    band: str

class Target(BaseModel):
    light_curve: List[Observation]
    ebv: float
    t_min: float
    t_max: float
    count: int
    name_model: str
    redshift: List[float]

class Point(BaseModel):
    time: float
    flux: float
    band: str

class Result(BaseModel):
    flux_jansky: List[Point]
    degrees_of_freedom: int
    covariance: List[List[float]]
    chi2: float
    parameters: Dict[str, float]


def fit(data, name_model, ebv, redshift, snadid):
    dust = sncosmo.CCM89Dust()
    model = sncosmo.Model(source=name_model, effects=[dust], effect_names=['mw'], effect_frames=['obs'])
    model.set(mwebv=ebv)
    fit_params = model.param_names
    fit_params.remove('mwebv')
    fit_params.remove('mwr_v')
    try:
        summary, fitted_model = sncosmo.fit_lc(data, model, fit_params, bounds={'z':(redshift[0], redshift[1])})
    except DataQualityError as d:
        print('DataQualityError')
        df = pd.DataFrame({'name' : snadid, 'model' : name_model, 'error' : 'DataQualityError', 'text' : str(d)})
        df.to_csv('id_exception_v6.csv', mode='a', index= False, header=False)
        return {'error' : 'DataQualityError'}
    except RuntimeError as r:
        print('RuntimeError')
        df = pd.DataFrame([{'name' : snadid, 'model' : name_model, 'error' : 'RuntimeError', 'text' : str(r)}])
        df.to_csv('id_exception_v6.csv', mode='a', index= False, header=False)
        return {'error' : 'RuntimeError'}
    return summary, fitted_model


def get_flux_and_params(summary, data, fitted_model, t_min, t_max, count):

    segment = np.linspace(t_min, t_max, count)
    df = data.to_pandas()
    points = []
    for band in df['band'].unique():
        predicts = fitted_model.bandflux(band, segment, df['zp'][0], df['zpsys'][0])
        points += [Point(time=time, flux=flux, band=band) for time, flux in zip(segment, predicts)]
    try: cov=summary.covariance.tolist()
    except:
        cov=[[]]
        print('covariance is none')
    return Result(flux_jansky=points, parameters=dict(zip(summary.param_names, summary.parameters)),
                       degrees_of_freedom=summary.ndof, covariance=cov, chi2=summary.chisq)


def approximate(data: Target, snadid):

    df = pd.DataFrame([obs.model_dump() for obs in data.light_curve])
    table = Table.from_pandas(df)
    fit_data = fit(table, data.name_model, data.ebv, data.redshift, snadid)
    try: summary, fitted_model = fit_data
    except ValueError: return fit_data
    result = get_flux_and_params(summary, table, fitted_model, data.t_min, data.t_max, data.count)
    return result





def plot(curves: Result, data, oid_namemodel):
    band_color = {'ztfr' : 'r', 'ztfg' : 'g', 'ztfi' : 'm'}
    mjd_offset = 58000
    data_r = data[data['band']=='ztfr']
    data_g = data[data['band']=='ztfg']
    if data_r.shape[0]>data_g.shape[0]:
        data_max = data_r
    else: data_max = data_g
    t_max_mag = data_max[data_max['mag']==data_max['mag'].min()]['mjd'].values[0] - mjd_offset
    t_l = t_max_mag - 30
    t_r = t_max_mag + 120
    curve = pd.DataFrame([obs.model_dump() for obs in curves.flux_jansky])
    fig, axs = plt.subplots(1, len(data['band'].unique()), figsize=(16,5))
    axs = np.array(axs)
    plt.suptitle(oid_namemodel, fontsize=20)
    it = 0
    flux_max = data['flux'].max() * 10**6
    for it, ax_band in enumerate(zip(axs.reshape(-1), data['band'].unique())):
        ax, band = ax_band[0], ax_band[1]
        ax.set_xlim([t_l, t_r])
        ax.set_ylim([-9, flux_max+10])
        data_band = data[data['band']==band]
        curve_band = curve[curve['band']==band]
        ax.errorbar(data_band['mjd']-mjd_offset, data_band['flux'] * 10**6, yerr=data_band['fluxerr'] * 10**6, fmt="o", color=band_color[band], elinewidth=1, marker='.', label=band)
        ax.plot(curve_band['time']-mjd_offset, curve_band['flux'] * 10**6, color=band_color[band])
        ax.set_xlabel("MJD-58000", fontsize=16)
        ax.grid(which='major')
        matplotlib.rc('xtick', labelsize=15)
        ax.legend(prop={"size":16})
        if it==0:
            ax.set_ylabel("Flux, " + "μ" + "Jy", fontsize=16)
            matplotlib.rc('ytick', labelsize=15)
        plt.savefig('Lom/' + oid_namemodel)
    plt.show()


def task(oid, list_models, count, redshift):
    data = pd.read_csv('data_calc_ref/' + str(oid) + '.csv')
    snadid = data['Name'][0]
    oid_ebv = pd.read_csv('oid_ebv.csv')
    ebv = float(list(oid_ebv[oid_ebv['OID'] == oid]['ebv'])[0])
    data_r = data[data['band']=='ztfr']
    data_g = data[data['band']=='ztfg']
    if data_r.shape[0]>data_g.shape[0]:
        data_max = data_r
    else: data_max = data_g
    t_max_mag = data_max[data_max['mag']==data_max['mag'].min()]['mjd'].values[0]
    t_min = t_max_mag - 30
    t_max = t_max_mag + 120
    data['zp'] = 8.9
    data['zpsys'] = 'ab'
    data.drop(['Unnamed: 0', 'magerr', 'clrcoeff', 'oid', 'flux', 'fluxerr', 'ref', 'referr', 'Name'], axis= 1 , inplace= True)
    data = data.rename(columns={'flux_dif': 'flux', 'flux_dif_err': 'fluxerr'})
    data.dropna()
    json_flux_dif = data.to_dict('records')
    result_list = []
    for model in list_models:
        curves = approximate(Target(light_curve=[Observation(mjd=obs['mjd'], flux=obs['flux'], fluxerr=obs['fluxerr'], band=obs['band'], zp=obs['zp'], zpsys=obs['zpsys'])
                                          for obs in json_flux_dif], ebv=ebv, name_model=model, t_min=t_min, t_max=t_max, count=count, redshift=redshift), snadid)
        try: plot(curves, data, str(snadid)+'_'+model)
        except AttributeError:
            res = -1
        try:
            z = curves.parameters['z']
            m_abs_max = data_r['mag'].min() - astropy.cosmology.Planck18.distmod(z).value
            res = {'name' : snadid, 'model' : model, 'M' : m_abs_max, 'chi2' : curves.chi2, 'z' : z,
                    't0' : curves.parameters['t0'], 'amplitude' : curves.parameters['amplitude'], 'mwebv' : curves.parameters['mwebv'],
                    'mwr_v' : curves.parameters['mwr_v']}
        except AttributeError:
            res = -1
        if type(res) is dict:
            result_list.append(res)
    result_list.sort(key=lambda x: x['chi2'])
    df_result = pd.DataFrame(result_list)
    print(df_result)
    df_result.to_csv('id_result_v6.csv', mode='a', index= False, header=False)
    return result_list


def get_best_fit(oid, list_models, t_min, t_max, count, redshift):
    result_list = []
    for model in list_models:
        res = task(oid, model, t_min, t_max, count, redshift)
        if type(res) is dict: result_list.append(res)
    result_list.sort(key=lambda x: x['chi2'])
    print(result_list)


list_nugent = ['nugent-sn1a', 'nugent-sn91t', 'nugent-sn91bg', 'nugent-sn1bc', 'nugent-hyper', 'nugent-sn2n', 'nugent-sn2l', 'nugent-sn2p']

#Расчет референсного значения, скорректированного потока и удаление выбросов
import math
import sklearn
from sklearn.ensemble import IsolationForest
from scipy import stats
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


snadoid_to_del = {
    208 : {'ztfr' : [59531.11098]},
    214 : {'ztfr' : [58879.55179], 'ztfg' : [59685.38839]},
    215 : {'ztfr' : [59304.47646, 58781.09242], 'ztfg' : [58480.53035]},
    220 : {'ztfr' : [58589.28968]},
    221 : {'ztfr' : [59707.47782]},
    222 : {'ztfr' : [58879.53719]},
    223 : {'ztfr' : [58883.51970, 58506.43773]},
    225 : {'ztfr' : [59503.09914]},
    226 : {'ztfr' : [58431.13555]},
    228 : {'ztfr' : [59301.42777]},
    229 : {'ztfr' : [58879.55417]},
    230 : {'ztfg' : [58732.14002]},
    234 : {'ztfr' : [59497.18369]},
    239 : {'ztfr' : [59478.17366]},
    241 : {'ztfr' : [58890.48614, 58854,57833]},
}


snadoid_to_ref = {
    122 : {'ztfr' : [21.939, 0.19], 'ztfi' : [20.085, 0.039]},
    165 : {'ztfr' : [21.652, 0.14], 'ztfg' : [21.577, 0.11], 'ztfi' : [21.173, 0.153]}
}


def calc_ref(oid, snadoid):
    band_ref = dict()
    data = pd.read_csv('curves/' + str(oid) + '.csv')
    data.drop(columns = ['Unnamed: 0'],axis = 1, inplace=True)
    data['Name'] = snadoid
    try: data['band'] = data['filter'].str.replace('z', 'ztf')
    except: data['band'] = data['band'].str.replace('z', 'ztf')
    data['flux'] = 10**(-0.4 * (data['mag']-8.9)) #* 10**6
    data['fluxerr'] = abs(-0.4 * math.log(10.0) * 10**(-0.4 * (data['mag']-8.9)) * data['magerr']) #* 10**6
    list_df = []
    snadoid_cut = int(snadoid[4:])
    if snadoid_cut in snadoid_to_del.keys():
        for band in data['band'].unique():
            if band in snadoid_to_del[snadoid_cut].keys():
                data_key = data[data['band']==band]
                data_key['mjd_str'] = data_key['mjd'].astype(str)
                deleted = snadoid_to_del[snadoid_cut][band]
                #for time in deleted:
                print(data_key.shape)
                    #data_key = data_key.loc[str(data_key['mjd'])!=str(time)]
                print(deleted)
                data_key = data_key.loc[~data_key['mjd_str'].isin([str(i) for i in deleted])]
                print(data_key.shape)
                list_df.append(data_key)
            else: list_df.append(data[data['band']==band])
        data = pd.concat(list_df, axis=0)
    print(data.shape)
    data_r = data[data['band']=='ztfr']
    data_g = data[data['band']=='ztfg']
    plt.scatter(data['mjd'], data['flux'])
    plt.errorbar(data['mjd'], data['flux'], yerr=data['fluxerr'], fmt="o")
    plt.show()
    if data_r.shape[0]>data_g.shape[0]:
        print('ztfr')
        data_max = data_r
    else:
        print('ztfg')
        data_max = data_g
    t_max_mag = data_max[data_max['mag']==data_max['mag'].min()]['mjd'].values[0]
    print(t_max_mag)
    data_cut = data[((data['mjd'] <= t_max_mag-30) | (data['mjd'] >= t_max_mag+120))]
    for band in data['band'].unique():
        data_band = data_cut[data_cut['band']==band]
        print(data_band.shape[0])
        if data_band.shape[0]==1:
            band_ref[band] = (list(data_band['flux'])[0],list(data_band['fluxerr'])[0])
        elif snadoid_cut in snadoid_to_ref.keys():
            ref = snadoid_to_ref[snadoid_cut][band][0]
            referr = snadoid_to_ref[snadoid_cut][band][1]
            band_ref[band] = (10 ** (-0.4 * ref), -0.4 * np.log(10) * 10 ** (-0.4 * ref) * referr)
        else:
            #p = (data_band['fluxerr']**(-2)).sum()
            #ref = ((data_band['flux'] * data_band['fluxerr']**(-2)).sum()) / p
            #print(ref)
            #band_ref[band] = (ref, (((data_band['fluxerr'] ** (-1) / p)**2).sum())**0.5)
            n = data_band.shape[0]
            #print(data_band.shape)
            p = 1 / (data_band['fluxerr'])**2
            ref = (p * (data_band['flux']-data_band['flux'].mean())).sum() / p.sum() + data_band['flux'].mean()
            err_eps = 1 / ((p.sum())**0.5)
            #print(data_band['flux'],'\n mean is ', data_band['flux'].mean())
            err_corr = (( (p*(data_band['flux']-data_band['flux'].mean())**2).sum())/(n-1))**0.5
            err_eps_corr = err_corr / ((p.sum())**0.5)
            if err_eps > err_eps_corr:
                err = (err_eps + err_eps_corr) / 2
            else:
                err = err_eps_corr
                print('err_eps_corr is', err)
            #err = ((data_band['fluxerr'].mean())**2 / p.sum())**0.5
            band_ref[band] = (ref,err)
            #data[data['band']==band]['referr_calc'] = data[data['band']==band]['referr'].mean()
    print(band_ref)
    data['ref'] = data['band'].apply(lambda x: band_ref[x][0])
    data['referr'] = data['band'].apply(lambda x: band_ref[x][1])
    data['flux_dif'] = data['flux'] - data['ref']
    data['flux_dif_err'] = ((data['fluxerr'])**2 + (data['referr'])**2)**0.5

    band_color = {'ztfr' : 'r', 'ztfg' : 'g', 'ztfi' : 'm'}
    fig, axes = plt.subplots(1, 3, figsize=(16,5))
    plt.suptitle(str(snadoid))
    for band, ax in zip(data['band'].unique(), axes):
        #ax.set_xlim([t_max_mag-30, t_max_mag+120])
        data_band = data[data['band']==band]
        ax.scatter(x=data_band['mjd'], y=data_band['flux_dif'], color=band_color[band])
        #sns.scatterplot(data=data, x='mjd', y='flux_dif', hue='band')
        ax.errorbar(data_band['mjd'], data_band['flux_dif'], yerr=data_band['flux_dif_err'], fmt="o", color=band_color[band])
        ax.set_xlabel("mjd")
        ax.set_ylabel("flux_dif")
    plt.show()

    data.to_csv('data_calc_ref/'+str(oid)+ '.csv')

objects = pd.read_csv('snad_catalog.csv')
objects = objects[objects['Type']=='PSN']
objects1 = objects[(objects['Name'].apply(lambda x: int(x[4:]))>=101) & (objects['Name'].apply(lambda x: int(x[4:]))<=114)]
print(objects1.shape)
[calc_ref(oid, snadoid) for oid, snadoid in zip(objects1['OID'], objects1['Name'])]

objects2 = objects[(objects['Name'].apply(lambda x: int(x[4:]))>=115) & (objects['Name'].apply(lambda x: int(x[4:]))<=122)]
print(objects2.shape)
[calc_ref(oid, snadoid) for oid, snadoid in zip(objects2['OID'], objects2['Name'])]

objects3 = objects[(objects['Name'].apply(lambda x: int(x[4:]))>=123) & (objects['Name'].apply(lambda x: int(x[4:]))<=140)]
print(objects3.shape)
[calc_ref(oid, snadoid) for oid, snadoid in zip(objects3['OID'], objects3['Name'])]

objects4 = objects[(objects['Name'].apply(lambda x: int(x[4:]))>=141) & (objects['Name'].apply(lambda x: int(x[4:]))<=165)]
print(objects4.shape)
[calc_ref(oid, snadoid) for oid, snadoid in zip(objects4['OID'], objects4['Name'])]

objects5 = objects[(objects['Name'].apply(lambda x: int(x[4:]))>=166) & (objects['Name'].apply(lambda x: int(x[4:]))<=189)]
print(objects5.shape)
[calc_ref(oid, snadoid) for oid, snadoid in zip(objects5['OID'], objects5['Name'])]

df = pd.DataFrame(columns=['name', 'model', 'error', 'text'])
df.to_csv('id_exception_v6.csv', mode='a', index= False)
df = pd.DataFrame(columns=['name', 'model', 'M', 'chi2', 'z',
                    't0', 'amplitude', 'mwebv','mwr_v'])
df.to_csv('id_result_v6.csv', mode='a', index= False)

objects = pd.read_csv('snad_catalog.csv')
objects = objects[objects['Type']=='PSN']
objects = objects[objects['Name'].apply(lambda x: int(x[4:]))>=101]
print(objects)
for oid in objects['OID']:
    task(oid, list_nugent, 3000, [0.01, 0.3])

